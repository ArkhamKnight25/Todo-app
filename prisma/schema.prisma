// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  avatar        String?
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  sessions      Session[]
  workspaces    WorkspaceMember[]
  ownedTasks    Task[]    @relation("TaskOwner")
  assignedTasks Task[]    @relation("TaskAssignee")
  comments      Comment[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  logo        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  members     WorkspaceMember[]
  projects    Project[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        Role      @default(MEMBER)
  joinedAt    DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId])
}

model Project {
  id          String     @id @default(cuid())
  workspaceId String
  name        String
  description String?
  color       String     @default("#0066FF")
  icon        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  sections    Section[]
  tasks       Task[]
}

model Section {
  id        String   @id @default(cuid())
  projectId String
  name      String
  order     Int
  createdAt DateTime @default(now())
  
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  priority    Priority    @default(MEDIUM)
  dueDate     DateTime?
  order       Int
  projectId   String
  sectionId   String?
  ownerId     String
  assigneeId  String?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  section     Section?    @relation(fields: [sectionId], references: [id])
  owner       User        @relation("TaskOwner", fields: [ownerId], references: [id])
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  
  subtasks    Subtask[]
  comments    Comment[]
  attachments Attachment[]
  tags        Tag[]
}

model Subtask {
  id          String   @id @default(cuid())
  taskId      String
  title       String
  completed   Boolean  @default(false)
  order       Int
  createdAt   DateTime @default(now())
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  taskId    String
  name      String
  url       String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String
  tasks     Task[]
}
